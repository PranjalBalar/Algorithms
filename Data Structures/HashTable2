# -*- coding: utf-8 -*-

#This program creates a modified version of a hash table to store values using chaining

l = [None] * 10

class Node:  
    def __init__(self, key, value):
    	self.value = value
        self.key = key
        self.next_node = None
        self.prev_node = None

class HashTable():

	def __init__(self, lst):
		self.lst = lst
		self.len = len(self.lst)

	def add(self, key, value):
		n = hash(key) % self.len
		if self.lst[n] == None:
			self.lst[n] = Node(key, value)
			return self.lst
		else:
			a = self.check_add(self.lst[n])
			a.next_node = Node(key, value)	
			return self.lst

	def check_add(self, node):
		if node.next_node == None:
			return node
		else:
			return self.check_add(node.next_node)

	def get(self, key):
		n = hash(key) % self.len
		if self.lst[n].key == key:
			return self.lst[n].value
		else:
			a = self.check_get(key, self.lst[n])
			if a != None:
				return a.value
			else:
				return None

	def check_get(self, key, node):
		if node.next_node == None:
			return None
		elif node.next_node.key == key:
			return node.next_node
		else:
			return self.check_get(node.next_node)

h = HashTable(l)